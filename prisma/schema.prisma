// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int       @id @default(autoincrement())
  username  String
  email     String    @unique
  password  String
  otp       Int?      @default(0)
  otpExpiry DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Posts     Post[]
  Likes     Like[]
  Comments  Comment[]

  Sender   friend[] @relation("Sender")
  Receiver friend[] @relation("Receiver")

  sentMessages   message[] @relation("MessageSender")
  recieveMessage message[] @relation("MessageReciever")

  @@index([email, id])
}

model Post {
  id         Int         @id @default(autoincrement())
  userId     Int
  caption    String
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  User       User        @relation(fields: [userId], references: [id])
  PostImages PostImage[]
  Likes      Like[]
  Comments   Comment[]
}

model PostImage {
  id        Int      @id @default(autoincrement())
  urls      String
  postId    Int
  Post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Like {
  id        Int      @id @default(autoincrement())
  userId    Int
  postId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User     @relation(fields: [userId], references: [id])
  Post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
}

model Comment {
  id        Int      @id @default(autoincrement())
  content   String
  userId    Int
  postId    Int
  User      User     @relation(fields: [userId], references: [id])
  Post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum FRIENDREQUESTSTATUS {
  ACCEPTED
  PENDING
}

model friend {
  id         Int                 @id @default(autoincrement())
  status     FRIENDREQUESTSTATUS @default(PENDING)
  senderId   Int
  receiverId Int
  createdAt  DateTime            @default(now())
  updatedAt  DateTime            @updatedAt
  Sender     User                @relation(fields: [senderId], references: [id], name: "Sender")
  Receiver   User                @relation(fields: [receiverId], references: [id], name: "Receiver")

  @@unique([senderId, receiverId])
}

model message {
  id        Int      @id @default(autoincrement())
  content   String
  senderId  Int
  reciverId Int
  sender    User     @relation(fields: [senderId], references: [id], name: "MessageSender")
  reciver   User     @relation(fields: [reciverId], references: [id], name: "MessageReciever")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([senderId, reciverId])
}
